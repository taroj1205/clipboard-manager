name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      build-ubuntu:
        description: "Build for Ubuntu"
        required: false
        default: false
        type: boolean
      build-windows:
        description: "Build for Windows"
        required: false
        default: false
        type: boolean
      build-macos:
        description: "Build for macOS"
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_changes:
    name: Check Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      changed: ${{ steps.filter.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter Changed Files
        id: filter
        uses: taroj1205/check-changes@v1
        with:
          base: ${{ github.event_name == 'push' && github.event.before || '' }}
          include: '**/*'
          exclude: |
            **/*.md
            .gitignore
            .gitattributes
            .vscode/**/*
            renovate.json
          summary: true

  biome:
    name: Code Quality (Biome)
    needs: check_changes
    if: ${{ needs.check_changes.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest
          
      - name: Run Biome
        run: biome ci .

  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task:
          - name: "TypeScript"
            command: "bun tsc --noEmit"
          - name: "Build Frontend"
            command: "bun run build"
    name: ${{ matrix.task.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bunx install

      - name: Run ${{ matrix.task.name }}
        run: ${{ matrix.task.command }}

  set-matrix:
    name: Determine Build Matrix
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && 
        (inputs.build-ubuntu || 
         inputs.build-windows || 
         inputs.build-macos))
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - id: generate-matrix
        name: Generate Matrix
        run: |
          os_list_json=""
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            os_list_json='"ubuntu-latest", "windows-latest", "macos-latest"'
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            declare -a os_array=()
            if [[ "${{ inputs.build-ubuntu }}" == "true" ]]; then
              os_array+=('"ubuntu-latest"')
            fi
            if [[ "${{ inputs.build-windows }}" == "true" ]]; then
              os_array+=('"windows-latest"')
            fi
            if [[ "${{ inputs.build-macos }}" == "true" ]]; then
              os_array+=('"macos-latest"')
            fi
            os_list_json=$(IFS=,; echo "${os_array[*]}")
          fi
          echo "matrix={\"os\":[${os_list_json}]}" >> $GITHUB_OUTPUT

  build:
    name: Build Tauri App
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    needs: [check, biome, set-matrix]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bunx install

      - name: Build
        run: bunx tauri build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: clipboard-manager-${{ runner.os }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
          if-no-files-found: warn

  verify:
    name: Verify
    needs: [check_changes, check, biome, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Set Result
        id: set-result
        run: |
          # Check if changes exist but no jobs ran, or if any job failed or was cancelled
          if [[ "${{ needs.check_changes.outputs.exists }}" != "true" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "No relevant changes detected - pipeline passed"
          elif [[ "${{ contains(needs.*.result, 'failure') }}" == "true" || "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Pipeline failed - some jobs failed or were cancelled"
            exit 1
          else
            echo "success=true" >> $GITHUB_OUTPUT
            echo "All jobs completed successfully"
          fi